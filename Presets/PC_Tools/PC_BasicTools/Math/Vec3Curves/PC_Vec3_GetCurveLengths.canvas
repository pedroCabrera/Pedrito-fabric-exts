{
  "objectType" : "Func",
  "metadata" : {
    "uiTextColor" : "{\n  \"r\" : 20,\n  \"g\" : 20,\n  \"b\" : 20\n  }",
    "uiNodeColor" : "{\n  \"r\" : 121,\n  \"g\" : 134,\n  \"b\" : 143\n  }"
    },
  "title" : "PC_Vec3_GetCurveLengths",
  "ports" : [
    {
      "objectType" : "Port",
      "nodePortType" : "Out",
      "name" : "PerLinePositions",
      "execPortType" : "In",
      "typeSpec" : "Vec3[]"
      },
    {
      "objectType" : "Port",
      "nodePortType" : "Out",
      "defaultValues" : {
        "Boolean" : false
        },
      "name" : "Closed",
      "execPortType" : "In",
      "typeSpec" : "Boolean"
      },
    {
      "objectType" : "Port",
      "nodePortType" : "In",
      "name" : "PerPointLenght",
      "execPortType" : "Out",
      "typeSpec" : "Scalar[]"
      },
    {
      "objectType" : "Port",
      "nodePortType" : "In",
      "name" : "LineLength",
      "execPortType" : "Out",
      "typeSpec" : "Scalar"
      }
    ],
  "extDeps" : {},
  "presetGUID" : "25C1C8A8A1B69A8480CEF2F1FE34D6AB",
  "code" : "operator subtraction_task<<<index>>>(Vec3[] Array,Boolean Closed,io Scalar[] PerLinePointLenght){
  Vec3 BackTangents[];
  BackTangents.resize(Array.size());
  if(index ==0){
     if(Closed){ PerLinePointLenght[index] = Vec3(Array[Array.size()-1]-Array[Array.size()-2]).length();}
     else{ PerLinePointLenght[index] = Vec3(Array[0]-Array[0]).length();}
  }
  else{ PerLinePointLenght[index] = Vec3(Array[index]-Array[index-1]).length(); }
}
dfgEntry {
  if(PerLinePositions.size()==0)return;
  PerPointLenght.resize(PerLinePositions.size());
  
  Scalar PerLinePointLenght[];
  PerLinePointLenght.resize(PerLinePositions.size()); 
  subtraction_task<<<PerLinePositions.size()>>>(PerLinePositions,Closed,PerLinePointLenght);
  LineLength = 0;
  PerPointLenght[0] = 0;
  for(Size e=0;e<PerLinePointLenght.size();e++){
    LineLength += PerLinePointLenght[e];  
    for(Size i=0;i<=e;i++){
      PerPointLenght[index][e] += PerLinePointLenght[i];}
  }  
  
}
",
  "requiredPresets" : {
    "PC_Tools.PC_BasicTools.Math.Vec3Curves.PC_Vec3_GetCurveLengths" : {
      "objectType" : "Func",
      "metadata" : {
        "uiTextColor" : "{\n  \"r\" : 20,\n  \"g\" : 20,\n  \"b\" : 20\n  }",
        "uiNodeColor" : "{\n  \"r\" : 121,\n  \"g\" : 134,\n  \"b\" : 143\n  }"
        },
      "title" : "PC_Vec3_GetCurveLengths",
      "ports" : [
        {
          "objectType" : "Port",
          "nodePortType" : "Out",
          "name" : "PerLinePositions",
          "execPortType" : "In",
          "typeSpec" : "Vec3[]"
          },
        {
          "objectType" : "Port",
          "nodePortType" : "Out",
          "defaultValues" : {
            "Boolean" : false
            },
          "name" : "Closed",
          "execPortType" : "In",
          "typeSpec" : "Boolean"
          },
        {
          "objectType" : "Port",
          "nodePortType" : "In",
          "name" : "PerPointLenght",
          "execPortType" : "Out",
          "typeSpec" : "Scalar[]"
          },
        {
          "objectType" : "Port",
          "nodePortType" : "In",
          "name" : "LineLength",
          "execPortType" : "Out",
          "typeSpec" : "Scalar"
          }
        ],
      "extDeps" : {},
      "presetGUID" : "25C1C8A8A1B69A8480CEF2F1FE34D6AB",
      "code" : "operator subtraction_task<<<index>>>(Vec3[] Array,Boolean Closed,io Scalar[] PerLinePointLenght){
  Vec3 BackTangents[];
  BackTangents.resize(Array.size());
  if(index ==0){
     if(Closed){ PerLinePointLenght[index] = Vec3(Array[Array.size()-1]-Array[Array.size()-2]).length();}
     else{ PerLinePointLenght[index] = Vec3(Array[0]-Array[0]).length();}
  }
  else{ PerLinePointLenght[index] = Vec3(Array[index]-Array[index-1]).length(); }
}
dfgEntry {
  if(PerLinePositions.size()==0)return;
  PerPointLenght.resize(PerLinePositions.size());
  
  Scalar PerLinePointLenght[];
  PerLinePointLenght.resize(PerLinePositions.size()); 
  subtraction_task<<<PerLinePositions.size()>>>(PerLinePositions,Closed,PerLinePointLenght);
  LineLength = 0;
  PerPointLenght[0] = 0;
  for(Size e=0;e<PerLinePointLenght.size();e++){
    LineLength += PerLinePointLenght[e];  
    for(Size i=0;i<=e;i++){
      PerPointLenght[index][e] += PerLinePointLenght[i];}
  }  
  
}
"
      }
    }
  }